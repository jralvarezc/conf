;; Set default language to allow spell checking
;; ispell-local-dictionary: "english"

;; Use desktop layout
;;(desktop-save-mode 1)

;; Disable menu
(menu-bar-mode -1)

;; Enable copy to system keyboard
(setq x-select-enable-clipboard t)

;; Headlines in org mode with solid gray
(setq org-fontify-whole-heading-line t)

;; TODO: Convert in config for use-package dired
(require 'dired )

;; Hide details by default
(add-hook 'dired-mode-hook 'dired-hide-details-mode)

;; Hide hidden files
(setq dired-listing-switches "-la")

;; Reuse buffer on visiting directories and parent directory
(define-key dired-mode-map
  (kbd "RET") 'dired-find-alternate-file)
(define-key dired-mode-map
  (kbd "^") (lambda () (interactive) (find-alternate-file "..")))
(put 'dired-find-alternate-file 'disabled nil)

;; Personal info
(setq user-full-name "Rafael Alvarez"
      user-mail-address "ralvarez@fluidattacks.com")

;; Fill column for autofill command M-q
(setq-default fill-column 80)

;; Disable startup message on empty files
(setq inhibit-startup-message t)

;; Disable default message on a buffer
(setq initial-scratch-message "")

;; Avoid backup  clutter the file tree
(setq backup-directory-alist
      `(("." . ,(concat user-emacs-directory "backups"))))

;; Avoid auto-save clutter the file tree
(setq auto-save-file-name-transforms
      `((".*" "~/.emacs.d/auto-saves/" t)))

;; Change custom file location to avoid modification of this file
(setq custom-file
      (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

;; Simple y or n, instead yes or no
(fset 'yes-or-no-p 'y-or-n-p)

;; Always confirm after quiting
(setq confirm-kill-emacs 'yes-or-no-p)

;; Always numbering lines with padding in solid line in format
(global-linum-mode t)
(setq linum-format "%3d\u2502")
;;(set-face-foreground 'linum "blue")

;; Always use a rules on top for columns
(add-hook 'window-configuration-change-hook
          (lambda () (ruler-mode 1)))

;; Display column number in mode line
(column-number-mode 1)

;; Delete trailing white spaces before save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Show trailing white space in red
(setq-default show-trailing-whitespace t)
(set-face-background 'trailing-whitespace "red")

;; Disable tab indentation.  Using 2 spaces instead
(setq-default indent-tabs-mode nil)
(setq tab-width 2)

;; Setup package library
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

;; Install use-package package if not installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))

;; All declared packages are enable by default. Disable=Comment
(setq use-package-always-ensure t)

;; Move lines and regions up and down
(use-package drag-stuff
  :init (drag-stuff-global-mode 1)
  :bind (("M-n" . drag-stuff-down)
         ("M-p" . drag-stuff-up)))

;; Control parenthesis
(use-package smartparens
  :config (progn (smartparens-global-mode)
                 (show-smartparens-global-mode t)))

;; Each level of parenthesis as different color
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

;; Red color if lines are greater than 80 columns
(use-package column-enforce-mode
  :hook (prog-mode text-mode))

;; Indent inmediatly
(use-package aggressive-indent
  :config (global-aggressive-indent-mode 1))

;; Nix mode for editing NixEL files *.nix
(use-package nix-mode)

(use-package slim-mode
  :ensure t
  :mode ("\\.slim\\'" . slim-mode))

;; Edit graphviz graphs
(use-package graphviz-dot-mode)

;; Extended search capabilities
(use-package ivy
  :diminish ivy-mode
  :config (ivy-mode 1))

(use-package swiper
  :bind
  ([remap isearch-forward]  . swiper)
  ([remap isearch-backward] . swiper)
  :custom
  (swiper-action-recenter t))

;; Org mode
(use-package org
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c b" . org-iswitchb))
  :hook
  (org-mode . org-indent-mode)
  :init
  (setq org-replace-disputed-keys t))

(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-responsive t))

;; Variety of simple and cool themes
;; http://chriskempson.com/projects/base16/
(use-package base16-theme
  :config (load-theme 'base16-bright t)
  :init (setq base16-theme-256-color-source "colors"))

;; Install docker file mode edit
(use-package dockerfile-mode)

(use-package feature-mode)

(use-package adoc-mode
  :mode ("\\.adoc\\'" . adoc-mode))

;; Tree view for files
(use-package direx
  :bind (("C-x C-j" . direx:jump-to-directory)))
;; :bind (("C-x C-j" . direx:jump-to-directory-other-window)))

;; Use aspell castellano dicts and enable in every mode
(use-package flyspell
  :init
  (setq-default ispell-program-name "aspell")
  (setq ispell-dictionary "castellano")
  :hook
  (text-mode . flyspell-mode)
  (prog-mode . flyspell-prog-mode))

;; Copy and cut from console session available on other X apps
;;(use-package xclip
;; :ensure t
;; :init (xclip-mode 1))

(use-package wc-mode
  :init
  (wc-mode 1)
  (setq wc-modeline-format "WC[c=%tc, w=%tw]"))

;; TODO: undo-tree

;; TODO: literal emacs

;; TODO: flycheck for python, typescript, yml, etc

;; TODO: Smart mode line
;; https://github.com/Malabarba/smart-mode-line#features
;; (use-package smart-mode-line
;; :config
;; (setq sml/theme 'dark)
;; (sml/setup))
